'Tester.t0 require

nop ::prompt
clear

// Build a Tester class to perform tests and record statistics
// TODO: move to own file
// TODO: add colour support
// TODO: add padding

Tester :t // Create an instance of Tester
{ | t .test }  ::test
{ | t .testf } ::testf

{ s | .nl s .$ "  -------------------------------" .$  .nl } ::section


'Strings section
" abc" 'abc " =$ " true test
""" abc""" 'abc " =$ " true test
" abc" 'abc " =$ " true test
" 'ABC len " 3 test
" 'abc 'abc =$ " true test
""" 'abc " abc" =$ """ true test // TODO: doesn't work
{ | 'abc " abc" =$ } true testf
" 65 charCode 'A =$ " true test
" 'CAT 0 charAt 67 = " true test
" 'CAT 1 charAt 65 = " true test
" 'CAT 2 charAt 84 = " true test


'Logic section
" true  ! " false test
" false ! " true  test
" false false & " false test
" false true  & " false test
" true  false & " false test
" true  true  & " true  test
" false false | " false test
" false true  | " true  test
" true  false | " true  test
" true  true  | " true  test
" false { | false } && "  false test
" false { | true }  && "  false test
" true  { | false } && "  false test
" true  { | true }  && "  true  test
" false { | false } || "  false test
" false { | true }  || "  true  test
" true  { | false } || "  true  test
" true  { | true }  || "  true  test
" true false | true false & | " true test


'Comparators section
" 1 1 =  " true  test
" 1 2 =  " false test
" 1 1 != " false test
" 1 2 != " true  test
" 1 2 <  " true  test
" 2 1 <  " false test
" 2 2 <= " true  test
" 2 3 <= " true  test


'Arithmetic section
// TODO: bug space needed before end quotes
" 1 1 +        " 2 test
" 0 1 +        " 1 test
" 2 1 -        " 1 test
" 0 6 -        " -6 test
" 4 2 *        " 8 test
" 4 2 /        " 2 test
" 10 3 mod     " 1 test
" 2 8 ^        " 256 test
" 15 %         " 0.15 test
" 15 10 10 ^ * " 150000000000 test // scientific notation, distance from earth to sun in meters
" 5 neg        " -5 test


'Combinatorics section
" 1 fact  " 1 test
" 2 fact  " 2 test
" 10 fact " 3628800 test
" 20 fact " 2432902008176640000 test
" 10 2 P  " 90 test
" 10 2 C  " 45 test


'Stack section
" 1 2 drop    " 1 test
" 1 2 3 drop2 " 1 test
" 1 dup drop  " 1 test
" 2 10 swap / " 5 test


'Conditionals section
"   true  { | 1 } if             " 1 test
" 2 false { | 1 } if             " 2 test
"   true  { | 1 } { | 2 } ifelse " 1 test
"   false { | 1 } { | 2 } ifelse " 2 test


'Arrays section
// Array Literal
[ 1 2 3 ] :a
[ 4 5 6 ] :b
a .[] b .[] .nl

// Numbers 1 to 10
[ 1 10 {} for ] .[] .nl
// or
10 {} []WithFn .[] .nl

// 1 repeated 10 times
[ 1 10 { _ | 1 } for ] .[] .nl
// or
[ { | 1 } 10 repeat ] .[] .nl
// or
10 { _ | 1 } []WithFn .[] .nl
// or
10 1 []WithValue .[] .nl

// Clone a
[ a {} do ] .[] .nl
// or
a clone[] .[] .nl

// Concatenate a and b
[ a {} do b {} do ] .[] .nl
// or
a b +[] .[] .nl

// Copy all elements of a except last
[ a {} do drop ] .[] .nl

// Copy a range
[ 1 10 {} for ] :a [ a 2 5 slice ] .[] .nl

" [ 1 2 3 ] 0 @ " 1 test
" [ 1 2 3 ] 1 @ " 2 test
" [ 1 2 3 ] 2 @ " 3 test


'Return section
" {       | 1 2     <- 3 } ()      " 2 test
" { :name | 1 2 name<- 3 } ()      " 2 test
" { :o | 1 { | 2 o<- 3 } () 4 } () " 2 test


" Function Programming" section
[ 1 10 {} for ] :a
a .[] .nl
a { c | c 2 mod 0 = } filter .[] .nl
" a 0 { | + } reduce " 55 test
a { v | v v * } map .[] .nl
" [ 'abc 'def 'xyz ] join 'abcdefxyz =$ " true test


" Own Variables" section
0 { count |
  { | count++ count }
} () ::counter

" counter " 1 test
" counter " 2 test
" counter " 3 test


'OO section
// Create a Lisp-like CONS operator, but use head/tail instead of car/cdr
// Is a simple class.
{ h t |
  { m |
    m switch
      'head  { this | h }
      ':head { v this | v :h }
      'tail  { this | t }
      ':tail { v this | v :t }
      {}
    end
  }
} ::cons

'car 'cdr cons :c // construct a cons
" c   'head c () () 'car =$ " true test // low-level method call
" c   'tail c () () 'cdr =$ " true test
"   c .head         'car =$ " true test // with .methodName support
"   c .tail         'cdr =$ " true test
" 1 c .:head  c .head 1 =   " true test
" 2 c .:tail  c .tail 2 =   " true test


'Recursion section
{ n | n 1 <= { | 1 } { | n n 1 - factorial () * } ifelse } :factorial
" 20 factorial () " 2432902008176640000 test
{ f | { x | { y | y x x () () } f () } { x | x x () } () } :Y // y-combinator
{ f | { n | n 1 <= { | 1 } { | n n 1 - f () * } ifelse } } Y () :fact2
" 10 fact2 () " 3628800 test


" Auto Functions" section
" { | 1 } ::auto auto " 1 test
" &auto () " 1 test

" Immediate Functions" section

t .report
