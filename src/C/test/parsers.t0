'lib/Tester.t0 require
'lib/parsers.t0 require

nop ::prompt
clear

Tester :t // Create an instance of Tester
{ | t .test }  ::test
{ | t .testf } ::testf


" Parser Tests" section

" thisthenthat0123 " 0 false false PStream :ps

ps .toString .$ .nl

" Literal Parser" section
ps 'this lit () .value .$ .nl
ps 'that lit () .$ .nl
ps 'this lit () .toString .$ .nl

/*
" " 0 false false PStream :ps
ps "  " lit 1 repeat ()
print

"  " 0 false false PStream :ps
ps "  " lit () .toString
print
*/

" Seq Parser" section
[ 'this lit 'then lit 'that lit ] seq ::seqparser
ps seqparser .value join .$ .nl


" Alt Parser" section
[ 'think lit 'this lit ] alt :altparser
ps altparser () .toString .$ .nl


" Range Parser" section
'0 $>c '9 $>c range :rangeparser
ps rangeparser () .$
'a 0 charAt 'z 0 charAt range :rangeparser
ps rangeparser () .value charCode .$ .nl


" Repeat Parser" section
'a $>c 'z $>c range 1 repeat :repeatparser
ps repeatparser () .value { x | x charCode } map join .$ .nl


" Optional Parser" section
'parse-"this" .$ .nl
ps 'this lit opt () .toString .$ .nl

'done .$ .nl
exit

'parse-"that" .$
ps [ 'that lit opt 'this ] seq () .toString .$


'thisthen print
ps [ 'this lit opt 'then lit ] seq () .toString .$


" NotChars Parser" section
ps " 0123456789" notChars 0 repeat () .toString .$
