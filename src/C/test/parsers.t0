{ input parser output let input 0 #F #F {} PStream :ps |
  " expect: " .$ input .$ "  -> " .$ output .$ .nl
  ps parser () { result |
    output
      { |
        result
          { | result .value output =$ t .score .$ .nl }
          { | #F t .score .$ .nl }
        ifelse
      }
      { | result ! t .score .$ .nl }
    ifelse
  } ()
  .nl
} ::testp


" Literal Parser" section

" thisXXX1"  'this lit  'this  testp
" thisXXX2"  'that lit  #F     testp


" Literal Map Parser" section
" thisXXX1"  'this 'foo litMap  'foo  testp


" Optional Parser" section
'thisthenthat  'this lit      'this testp
'thisthenthat  'this lit opt  'this testp


" Repeat Parser" section
'AAAB  'A lit 0 repeatp joinp  'AAA  testp
'AAAB  'A lit 4 repeatp        #F    testp


" Seq Parser" section
'thisthenthat0123  [ 'this lit 'then lit ] seq joinp  'thisthen   testp
'thisthenthat0123  [ 'this 'then ] seq joinp          'thisthen   testp
'(this)            [ '( 'this ') ] 1 seq1             'this       testp


" Alt Parser" section
'thisthenthat0123  [ 'think 'this ] alt 'this testp


" Range Parser" section
'567  `0 `9 range { | c>$ } mapp  '5  testp
'abc  `0 `9 range   #F  testp


" Repeat Parser" section
'567  `0 `9 range star { | cjoin } mapp  '567  testp


" Opt(ional) Parser" section
'this   'that lit       #F    testp
'this   'this lit       'this testp
'this   'that lit opt   { v | #F v = { | 'skip } if } mapp 'skip    testp
'this   'this lit opt   'this testp


" chars Parser" section
'thisthenthat0123   'this chars      't        testp
'thisthenthat0123   'this chars star joinp 'thisth   testp


" !chars Parser" section
'thisthenthat0123   '0123456789 !chars              't              testp
'thisthenthat0123   '0123456789 !chars star joinp   'thisthenthat   testp


" Delimiter Parser" section
'1,2,3    `0 `9 range { | c>$ } mapp  '1                              testp
'1,2,3    [ `0 `9 range ', ] 0 seq1 { | c>$ } mapp '1                 testp
'1,2,3,   [ `0 `9 range ', lit ] 0 seq1 star  { | cjoin } mapp '123   testp
'1,2,3,   `0 `9 range ', lit delim { | cjoin } mapp '123              testp


/*
// doesn't work without some kind of wildcard parser
" Not Parser" section
" this then that." " [ '. lit chars notp ] 1 seq1 () guru .value .$ #T " #T testp
*/


" Map Parser" section
'one  'one lit { | switch 'one '1 'two '2 '3 end } mapp '1 testp
'two  'two lit { | switch 'one '1 'two '2 '3 end } mapp '2 testp


'Grammar section
{ let
  call:   { m o | o m o () () } ; // Call the method with specified name
  this:   'this lit ;
  that:   'that lit ;
  repeat: 'a lit 1 repeatp ;
  star1:  'a lit star ;
  plus1:  'a lit plus ;
  seq1:   [ 'abc lit 'def lit ] seq ;
  alt1:   [ 'abc lit 'def lit ] alt ;
  alt2:   [ 'this lit 'that lit ] alt ;
  alt3:   [ << this >> << that >> ] alt ;
  | { | ?? }
} () :grammar

{ input sym let input 0 #F #F grammar PStream :ps |
  " symbol: " .$ sym .$ "  input: " .$ input .$ .nl
  [ sym ps .call t .score .$ .nl ] drop
  .nl
} ::testg // test grammar


'thisthenthat0123   'this     testg
'that0123           'that     testg
'aaaaaa             'repeat   testg
'aaaaaa             'star1    testg
'aaaaaa             'plus1    testg
'abcdef             'seq1     testg
'abc                'alt1     testg
'def                'alt1     testg
'this               'alt2     testg
'that               'alt2     testg
'this               'alt3     testg
'that               'alt3     testg
