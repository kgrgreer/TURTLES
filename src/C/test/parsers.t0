'lib/Tester.t0 require
'lib/parsers.t0 require

nop ::prompt
clear

Tester :t // Create an instance of Tester
{ | t .test }  ::test
{ | t .testf } ::testf

{ input parser expected |
  input 0 false false PStream { ps |
    " input: " .$ input .$ .nl
    ps parser expected test
    .nl
  } ()
} ::testp


" Literal Parser" section
" thisthenthat0123 " " 'this lit () .value 'this =$ " true testp
" thisthenthat0123 " " 'that lit ()        " #F testp


" Repeat Parser" section
" AAAB " " 'A lit 0 repeat () .value join len " 3  testp
" AAAB " " 'A lit 4 repeat ()                 " #F testp


" Seq Parser" section
" thisthenthat0123 " " [ 'this lit 'then lit ] seq () .value join 'thisthen =$ " true testp


" Alt Parser" section
" thisthenthat0123 " " [ 'think lit 'this lit ] alt () .value 'this =$ " true testp


" Range Parser" section
(*
`0 `9 range :rangeparser
ps rangeparser () .$
'a 0 charAt 'z 0 charAt range :rangeparser
ps rangeparser () .value charCode .$ .nl
*)

" Repeat Parser" section
(*
`a `z range 1 repeat :repeatparser
ps repeatparser () .value { x | x charCode } map join .$ .nl
*)

" Optional Parser" section
(*
'parse-"this" .$ .nl
ps 'this lit opt () .toString .$ .nl

'parse-"that" .$
ps 'that lit () .$ .nl
ps 'that lit opt () .$ .nl

'thisthen print
ps [ 'this lit opt 'then lit ] seq () .toString .$ .nl
*)

" NotChars Parser" section
(*
ps " 0123456789" notChars () .toString .$ .nl
// TODO: returns an array of chars, make join convert numbers to strings
ps " 0123456789" notChars star () .value join .$ .nl .nl // .toString .$ .nl
*)

t .report
