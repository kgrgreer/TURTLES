'som/som.t0 require
'lib/Tester.t0 require

nop ::prompt
Tester :t // Create an instance of Tester

{ script answer | [ script answer t .test  ] drop } ::test

SOMParser :som

{ name input test let input 0 #F som .ignore {} PStream :ps |
  ANSI.BOLD ANSI.BLUE .$ .$ name .$ ANSI.RESET .$ " , input: " .$ input .$ .nl
//  [ ps name som .call () dup { | .value test #T t .test } { | 'syntax-error .$ .nl  '1 2 t .test } ifelse ] drop
  [ name som .call ps .parse dup { | .value test #T t .test } { | 'syntax-error .$ .nl  '1 2 t .test } ifelse ] drop
  .nl
} ::testsom

'superclass   'Object         " 'Object =$"         testsom
'superclass   " "             " 0 ="                testsom
'fields       '|foo|          " join 'foo =$ "      testsom
'fields       " |foo bar|"      "  join dup .$  'foobar =$ "      testsom
unarySelector: 'foo           " 'foo =$ "           testsom
binaryPattern: '+foo       " join '+foo =$"       testsom
// keywordPattern: " x:a y: b "  " dup .[] { let 1 @ :a | '0: .$ a 0 @ .$  '1: .$ a 1 @ .$ } () #F" testsom // adds '00' to end of terms

literalNumber: '42 " 42 = " testsom
literalString: ''42' " '42 =$ " testsom
// literalSymbol: " #'foo'"      " guru #T"            testsom // crashes

KeywordSeq:        " foo:bar:"     " 'foo:bar: =$"       testsom // doesn't allow space, is that correct
KeywordSeq:        " foo:bar:"     " 'foo:bar: =$"       testsom // doesn't allow space, is that correct
KeywordSeq:        " foo:bar:"     " 'foo:bar: =$"       testsom // doesn't allow space, is that correct
KeywordSeq:        " foo:bar:"     " 'foo:bar: =$"       testsom // doesn't allow space, is that correct
keywordSelector:   " foo:bar:"     " 'foo:bar: =$"       testsom // doesn't allow space, is that correct

binarySelector:  '~&|*/\+<>,%@-= " '~&|*/\+<>,%@-= =$" testsom
unarySelector:  'foo " 'foo =$" testsom
selector:          " foo:bar:"     " 'foo:bar: =$"       testsom // doesn't allow space, is that correct
selector:  '~&|*/\+<>,%@-= " '~&|*/\+<>,%@-= =$" testsom

selector:  'foo " 'foo =$" testsom


(*
binarySelector:   "  "   " #T" testsom
keywordSelector:  "  "   " #T" testsom
unarySelector:    "  "   " #T" testsom
*)

identifier:   'primitive      " 'primitive =$ "     testsom
identifier:   'foo            " 'foo =$ "           testsom
literalArray: " #(1 2 3)"     " # 3 = "             testsom
Number:       '5              " 5 ="                testsom
Alpha:        'm              " 'm =$"              testsom
Alpha:        'M              " 'M =$"              testsom
Num:          '0              " '0 =$"              testsom
AlphaNum:     'M              " 'M =$"              testsom
AlphaNum:     '0              " '0 =$"              testsom
Identifier:   " foo "           " 'foo =$"          testsom
STPrimitive:  'primitive      " 'primitive =$ "     testsom
Separator:    " ----  "       " # 4 = "             testsom
OperatorSeq:  '~&|*/\+<>,%@-= " '~&|*/\+<>,%@-= =$" testsom
Keyword:      " foo: "          " 'foo: =$"         testsom
Keyword:      " foo:a "         " 'foo: =$"         testsom
KeywordSeq:   " foo:bar:"     " 'foo:bar: =$"       testsom // doesn't allow space, is that correct
STString:     " 'string' "      " 'string =$"       testsom
STString:     " 'a\nb\r' "      " len 4 ="          testsom
STString:     " '\n\n' "      " [ nl nl ] join =$"  testsom
Comment:      """ "comment"   """  " # 7 ="         testsom
Whitespace:   "  "            " sp =$"              testsom
Whitespace:   "   "           """ "   " =$"""       testsom
Whitespace:   tab             " tab =$"             testsom
Whitespace:   nl              " nl =$"              testsom
Whitespace:   cr              " cr =$"              testsom
  [ cr nl tab sp ] join :ws
Whitespace:   ws              " ws =$"              testsom



SOMCompiler :som

{ name input test let input 0 #F som .ignore {} PStream :ps |
  ANSI.BOLD ANSI.BLUE .$ .$ name .$ ANSI.RESET .$ " , input: " .$ input .$ .nl
//  [ ps name som .call () dup { | .value test #T t .test } { | 'syntax-error .$ .nl  '1 2 t .test } ifelse ] drop
  [ name som .call ps .parse dup { | .value test #T t .test } { | 'syntax-error .$ .nl  '1 2 t .test } ifelse ] drop
  .nl
} ::testsom

'fields       '|foo|          " 'foo =$ "      testsom
'fields       " |foo bar|"      """  " foo bar" =$ """      testsom


t .report
