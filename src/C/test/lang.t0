'lib/Combinatorics.t0 require
'lib/template.t0 require

'Let section
42 Let :a
" a .get " 42 test
" 66 a .set a .get " 66 test


'Comment section
"""
1
// 2
""" 1 test

"""
1
/* 2 */
""" 1 test

"""
1
(* 2 *)
""" 1 test


'Math section
" 5  abs " 5 test
" -5 abs " 5 test
" 1  neg " -1 test
" -1 neg "  1 test


'Strings section
" abc" 'abc " =$ " #T t .test
""" abc""" 'abc " =$ " #T t .test
" abc" 'abc " =$ " #T t .test
" 'ABC len " 3 test
" 'abc 'abc =$ " #T test
""" 'abc " abc" =$ """ #T test // TODO: doesn't work
{ | 'abc " abc" =$ } #T testf
" 65 charCode 'A =$ " #T test
" 'CAT 0 charAt 67 = " #T test
" 'CAT 1 charAt 65 = " #T test
" 'CAT 2 charAt 84 = " #T test

'Characters section
" 65 charCode 'A =$ " #T test
" `A " 65 test
""" ` "  " =$ """ #T test // TODO: change to '


'Logic section
" #T !    " #F test
" #F !    " #T  test
" #F #F & " #F test
" #F #T & " #F test
" #T #F & " #F test
" #T #T & " #T test
" #F #F | " #F test
" #F #T | " #T test
" #T #F | " #T test
" #T #T | " #T test
" #F { | #F } && " #F test
" #F { | #T } && " #F test
" #T { | #F } && " #F test
" #T { | #T } && " #T test
" #F { | #F } || " #F test
" #F { | #T } || " #T test
" #T { | #F } || " #T test
" #T { | #T } || " #T test
" #T #F | #T #F & | " #T test


'Comparators section
" 1 1 =  " #T test
" 1 2 =  " #F test
" 1 1 != " #F test
" 1 2 != " #T test
" 1 2 <  " #T test
" 2 1 <  " #F test
" 2 2 <= " #T test
" 2 3 <= " #T test


'Arithmetic section
" 1 1 +        " 2 test
" 0 1 +        " 1 test
" 2 1 -        " 1 test
" 0 6 -        " -6 test
" 4 2 *        " 8 test
" 4 2 /        " 2 test
" 10 3 mod     " 1 test
" 2 8 ^        " 256 test
" 15 %         " 0.15 test
// " 15 10 10 ^ * " 150000000000 test // scientific notation, distance from earth to sun in meters
" 5 neg        " -5 test


'Combinatorics section

" 1 fact  " 1 test
" 2 fact  " 2 test
" 10 fact " 3628800 test
// " 20 fact " 2432902008176640000 test
" 10 2 P  " 90 test
" 10 2 C  " 45 test
" [ [         ] {} permute ] # "  0 test
" [ [ 1       ] {} permute ] # "  1 test
" [ [ 1 2     ] {} permute ] # "  2 test
" [ [ 1 2 3   ] {} permute ] # "  6 test
" [ [ 1 2 3 4 ] {} permute ] # " 24 test


'Stack section
" 1 2 drop    " 1 test
" 1 2 3 drop2 " 1 test
" 1 dup drop  " 1 test
" 2 10 swap / " 5 test


'Conditionals section
"   #T { | 1 } if             " 1 test
" 2 #F { | 1 } if             " 2 test
"   #T { | 1 } { | 2 } ifelse " 1 test
"   #F { | 1 } { | 2 } ifelse " 2 test


'Arrays section
// Array Literal
[ 1 2 3 ] :a
[ 4 5 6 ] :b
a .[] b .[] .nl

// Numbers 1 to 10
[ 1 10 {} for ] .[] .nl
// or
10 {} []WithFn .[] .nl

// 1 repeated 10 times
[ 1 10 { _ | 1 } for ] .[] .nl
// or
[ { | 1 } 10 repeat ] .[] .nl
// or
10 { _ | 1 } []WithFn .[] .nl
// or
10 1 []WithValue .[] .nl

// Clone a
[ a {} do ] .[] .nl
// or
a clone[] .[] .nl

// Concatenate a and b
[ a {} do b {} do ] .[] .nl
// or
a b +[] .[] .nl

// Copy all elements of a except last
[ a {} do drop ] .[] .nl

// Copy a range
[ 1 10 {} for ] :a [ a 2 5 slice ] .[] .nl

" [ 1 2 3 ] 0 @ " 1 test
" [ 1 2 3 ] 1 @ " 2 test
" [ 1 2 3 ] 2 @ " 3 test
" [ 1 2 3 4 ] {} do " 4 test
" [ 1 2 3 4 ] {} doReverse " 1 test
" [ 1 2 3 4 ] reverse 0 @ " 4 test


'Return section
" {       | 1 2     <- 3 } ()      " 2 test
" { :name | 1 2 name<- 3 } ()      " 2 test
" { :o | 1 { | 2 o<- 3 } () 4 } () " 2 test


'Functions section
" 1 { | } () " 1 test
" 1 { }   () " 1 test
" { | 2 } () " 2 test
" 3 { a | a } () " 3 test
" 4 { a let a a + :b | a b + } () " 12 test
"   { let 42 :a | a } () " 42 test


" Function Programming" section
[ 1 10 {} for ] :a
a .[] .nl
a { c | c 2 mod 0 = } filter .[] .nl
" a 0 { | + } reduce " 55 test
a { v | v v * } map .[] .nl
" [ 'abc 123 #>$ 'youandme ] join 'abc123youandme =$ " #T test
" [ 'abc 123  >$ 'youandme ] join 'abc123youandme =$ " #T test
" [ 'abc 123     'youandme ] join 'abc123youandme =$ " #T test
" [ 'abc 'def 'xyz ] ', joinWith 'abc,def,xyz =$ " #T test
""" [ 'abc 'def 'xyz ] joins " abc def xyz" =$ """ #T test
" { a b | a b + } :plus  1 2 plus () " 3 test
" 1 plus curry :plus1  2 plus1 () " 3 test
" 1 2 plus curry curry :three  three () " 3 test


" Own Variables" section
0 { count |
  { | count++ count }
} () ::counter
" counter " 1 test
" counter " 2 test
" counter " 3 test


'Looping section
" { let 0 :i |
  { | i 10 < }
    { | i++ }
  while
  i
} () " 10 test

" { let 0 :i | 1 10 { | i++ } for i } () " 10 test
" { let 0 :i | 10 1 { | i++ } for i } () " 10 test


'Switch section
"""
  'a switch
    'a 1 // a comment
    'b 2
       3
  end
""" 1 test

"""
  'c switch
    'a { | 1 } // a comment
    'b { | 2 }
       { | 3 }
  end ()
""" 3 test


'OO section
// Create a Lisp-like CONS operator, but use head/tail instead of car/cdr
// Is a simple class.
{ h t |
  { m |
    m switch
      'head  { this | h }
      ':head { v this | v :h }
      'tail  { this | t }
      ':tail { v this | v :t }
      {}
    end
  }
} ::cons

'car 'cdr cons :c // construct a cons
" c   'head c () () 'car =$ " #T test // low-level method call
" c   'tail c () () 'cdr =$ " #T test
"   c .head         'car =$ " #T test // with .methodName support
"   c .tail         'cdr =$ " #T test
" 1 c .:head  c .head 1 =   " #T test
" 2 c .:tail  c .tail 2 =   " #T test


'Recursion section
{ n | n 1 <= { | 1 } { | n n 1 - factorial () * } ifelse } :factorial
// " 20 factorial () " 2432902008176640000 test
{ f | { x | { y | y x x () () } f () } { x | x x () } () } :Y // y-combinator
{ f | { n | n 1 <= { | 1 } { | n n 1 - f () * } ifelse } } Y () :fact2
" 10 fact2 () " 3628800 test


" Auto Functions" section
// Auto Functions are functions that are automatically called when accessed
// regular function:   foo ()
// automatic function: foo
// Can access non-automatic version by using & prefix, ie. &foo
" { | 1 } ::auto auto " 1 test
" &auto () " 1 test


" Immediate Functions" section
// Immediate Functions are called at compile-time, when they're referenced
// Note that callMe is called even though the function it is in is never called
" 0 { | '<called> .$ 42 } :!callMe { | callMe } drop " 42 test


" Immediate Blocks" section
// Immediate Blocks are called at compile-time
// TODO: like eval, requires an extra space at end of script
i{ 'hello .$  }i
{ | i{ 'foo .$  }i 'bar .$ } ::a
a a a a a .nl

// TODO: make test
10 :MAX
MAX . .nl // 10
{ |
  i{ 20 :MAX  }i // scoped constant
  MAX . .nl // 20
} ()
MAX . .nl // 10


'String section
" '012345 0 3 substring '012 =$ " true test


'Cond section
"""
  #T
  cond
   { | #F } 111
   { | #T } 222
  end
""" 222 test


'Emit section

"""  " 1 2 +" emit """ 3 test


" Scope Lookup" section
" 1 :x 'x ?? " 1 test
" 2 :y { | 'y ?? } () " 2 test
" { let 3 :z |     'z ?? } () " 3 test
" { let 3 :z | { | 'z ?? } () } () " 3 test
" { let 1 :x 2 :y 3 :z | { | 'z ?? } } () () " 3 test
" 5 { let 1 :x 2 :y 3 :z | { _ | 'z ?? } } () () " 3 test

{ let 1 :x 2 :y | { s | s ?? } } () :look
" 'x look () " 1 test
" 'y look () " 2 test


'Set section
Set :set
" 'foo set .? " #F test
" 'foo set .add  'foo set .?  " #T test


'Template section
""" ${ text {{ 'code }} text}$ dup .$ " text code text" =$ """ #T test

// TODO: doesn't work because fn, ln and age aren't in scope
"""
{ fn ln age |
${
First Name: {{ fn }}
Last Name:  {{ ln }}
Age:        {{ age #>$ }}
}$ .$
} ::displayUser
'John 'Smith 42 displayUser
#T
""" #T test

exit


'Error section
" #F " true test
