" [START PREFIX]" .$

1 1 = :true         // define true
1 2 = :false        // define false
{ | } :nil          // define 'nil', like doing nil = new Object() in Java/JS
{ n | 0 n - } ::neg // negate

9 charCode :tab  10 charCode :nl  13 charCode :cr

{ start end block | { | start end <= } { | start block () start++ } while } ::for

// Standard Forth-like Functions
{ v | v v } ::dup  { _ | } ::drop  { a b | b a } ::swap

// Standard High-Order Functions
{ a f | 0 a len 1 - { i | a i @ f () } for } ::forEach
{ a f | [ a f forEach ] } ::map
{ a v f | v a f forEach } ::reduce
// { a p | [ a { e | e p () { | e } if } forEach ] } ::filter
// { a | a " " { c | c + } reduce } ::join

// A helper function for displaying section titles
// { t | " " .$ t .$ } ::section

" [END PREFIX]" .$
