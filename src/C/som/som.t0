// som.t0
// SOM to T0 Compiler

'lib/template.t0 require

// translated from: https://github.com/SOM-st/SOM/blob/master/specification/SOM.g4
{ let
  call:                { m o | o m o () () } ; // Call the method with specified name
  program:             << classdef >> plus ;
  classdef:            [
    << identifier >> '= << superclass >> '(
      << instanceFields >>
      << method >> star
      [ << Separator >>  << classFields >> opt << method >> star ] seq opt
    ')
  ] seq ;
  superclass:          << Identifier >> opt ;
  instanceFields:      << fields >> ;
  classFields:         << fields >> ;
  fields:              [ '| << variable >> star '| ] 1 seq1 [] optMap ;
  method:              [ << pattern >> '= [ << STPrimitive >>  << methodBlock >> ] alt ] seq ;
  pattern:             [ << keywordPattern >>  << binaryPattern >>  << unaryPattern >> ] alt ;
  unaryPattern:        << unarySelector >> ;
  binaryPattern:       [ << binarySelector >>  << argument >> ] seq ;
  keywordPattern:      [ << keyword >>  << argument >> ] seq plus ;
  methodBlock:         [ '( << blockContents >> opt ') ] 1 seq1 ;
  unarySelector:       [ << identifier >> " :" lit notp ] 0 seq1 ;
  binarySelector:      << OperatorSeq >> ;
  identifier:          [ << STPrimitive >>  << Identifier >> ] alt ;
  keyword:             << Keyword >> ;
  argument:            << variable >> ;
  blockContents:       [ [ '| << localDefs >> '| ] 1 seq1 [] optMap << blockBody >> ] seq ;
  localDefs:           << variable >> star ;
  blockBody:           [ << blockBodyReturn >>  << blockBodyExpression >> ] alt ;
  resul:               [ << expression >> '. lit opt ] 0 seq1 ;
  blockBodyReturn:     [ '^ << resul >> ] 1 seq1 ;
  blockBodyExpression: [ << expression >> [ '. << blockBody >> opt ] 1 seq1 opt ] seq ;
  expression:          [ << assignation >>  << evaluation >> ] alt ;
  assignation:         [ << assignments >>  << evaluation >> ] seq ;
  assignments:         << assignment >> plus ;
  assignment:          [ << variable >> ':= ] 0 seq1 ;
  evaluation:          [ << primary >> << messages >> sp optMap ] seq ;
  primary:             [ << variable >> << nestedTerm >> << nestedBlock >> << literal >> ] alt ;
  variable:            << identifier >> ;
  /*
  unaryMessage+ binaryMessage* keywordMessage?
| binaryMessage+ keywordMessage?
| keywordMessage;
*/
messages2: [
  [ << unaryMessage >> plus << binaryMessage >> star << keywordMessage >> opt ] seq
  [ " " [] litMap           << binaryMessage >> plus << keywordMessage >> opt ] seq
  [ " " [] litMap           " " [] litMap            << keywordMessage >>     ] seq
] alt ;
  // Difference between above and below is that below will parse an empty string
  // but messages is only referenced in evaluation as opt, so it shouldn't matter
  messages:            [ << unaryMessage >> star << binaryMessage >> star << keywordMessage >> opt ] seq ;
  unaryMessage:        << unarySelector >> ;
  binaryMessage:       [ << binarySelector >>  << binaryOperand >> ] seq ;
  binaryOperand:       [ << primary >>  << unaryMessage >> star ] seq ;
  keywordMessage:      [ << keyword >>  << formula >> ] seq plus ;
  formula:             [ << binaryOperand >>  << binaryMessage >> star ] seq ;
  nestedTerm:          [ '( << expression >> ') ] 1 seq1 ;
  literal:             [ << literalArray >>  << literalSymbol >>  << literalString >>  << literalNumber >> ] alt ;
  literalArray:        [ '# '( << literal >> star ') ] 2 seq1 ;
  literalNumber:       << Number >> ;
  literalSymbol:       [ '# [ << string >>  << selector >> ] alt ] 1 seq1 tok ;
  literalString:       << STString >> ;
  selector:            [ << binarySelector >>  << keywordSelector >>  << unarySelector >> ] alt ;
  keywordSelect2:      << KeywordSeq >> ;
  keywordSelector:     << KeywordSeq >> ;
  string:              << STString >> ;
  nestedBlock:         [ '[  << blockPattern >> [] optMap  << blockContents >> [] optMap '] ] seq ;
  blockPattern:        [ << blockArguments >> '| ] 0 seq1 ;
  blockArguments:      [ " :" << argument >> ] seq joinp plus ;
  //  Number:            { o | [ '- lit opt << Num >> plus [ '. << Num >> plus ] seq opt ] seq tok } ;
  Number:              [ '- lit opt << Num >> plus joinp [ '. << Num >> plus joinp ] seq joinp opt ] seq { | { | } filter join (* $># *) } mapp tok ; // $># only works with integers
  Alpha:               [ `a `z range `A `Z range ] alt { | c>$ } mapp ;
  Num:                 `0 `9 range { | c>$ } mapp ;
  AlphaNum:            [ << Alpha >>  << Num >> ] alt ;
  Identifier:          [ << Alpha >>  << AlphaNum >> star joinp ] seq joinp tok ;
  STPrimitive:         'primitive lit ;
  Separator:           '- lit 4 repeatp tok ;
  OperatorSeq:         '~&|*/\+<>,%@-= chars plus joinp ;
  Keyword:             [ << Identifier >> " :" ] seq joinp tok ; // ': doesn't work because it gets confused with 'let' syntax
  KeywordSeq:          << Keyword >> plus joinp tok ;
  STStringChar:        [
    '\b  8 c>$ litMap // backspace
    '\t  9 c>$ litMap // tab
    '\n 10 c>$ litMap // newline
    '\f 12 c>$ litMap // formfeed
    '\r 13 c>$ litMap // carriage return
    '\' 39 c>$ litMap // single quote
    '\\ 92 c>$ litMap // backslash
    //      '\0 litMap // zero byte character, doesn't work well with C strings
    '' !chars ] alt ;
  STString:            [ '' << STStringChar >> star '' ] 1 seq1 joinp ;
  Comment:             [ '" '" !chars star '" ] 1 seq1 tok ;
  Whitespace:          [ tab cr nl sp ] alt plus joinp tok ;
  ignore:              [ << Whitespace >>  << Comment >> ] alt plus tok ;
  | { s | (* 'method: .$ s .$ .nl *) s ?? (* dup ! { | 'unknown-method .$ .nl } if *) }
} () :SOMParser


// Macro for semantic actions
// !! <name> <body> ;;  ->  name: { o | 'name o .super body mapp () } ;
{ let sym :m ';; readUntil :body |
  ${ {{ m }}: { o | '{{ m }} o .super {{ body }} mapp () } ; }$ emit
} :!!! // Immediate function named !!


{ let _super_: SOMParser ;
  super: { m o | o m _super_ () } ;

  // What each line would like like without the !! macro:
  // fields:              { o | 'fields o .super &joins mapp () } ;
(*

classdef: [
  << identifier >> '= << superclass >> '(
    << instanceFields >>
    << method >> star
    [ << Separator >>  << classFields >> opt << method >> star ] seq opt
  ')
] seq ;
*)

  !! program { | joins } ;;
  !! classdef { a let
    a 0 @ :identifier
    a 2 @ :superclass
    a 4 @ :instanceFields
    a 5 @ :methods
    a 6 @ { | [ 0 " classFields" [] ] } || :staticInfo
    staticInfo 1 @ :classFields
    staticInfo 2 @ :classMethods
  |
    ${
{
  {{ instanceFields }}
  let
  super: {{ superclass }} ; {{
}}  {{ methods { m | nl "   " m } do }}
  | { ?? }

  // Start Static
  {{ classFields }}
  {{ (* classMethods { m | nl "   " m } do *) }}
  // End Static

} ::{{ identifier }}
    }$
  } ;;

  !! fields &joins ;;
  //   pattern:             [ << keywordPattern >>  << binaryPattern >>  << unaryPattern >> ] alt ;
  !! method { a let
    a 0 @       :pattern
    a 2 @       :body
    pattern 0 @ :name
    pattern 1 @ :args
    |
      ${ {{ name }}: { ---: {{ args }} self{{ body }}} ; }$
  } ;;
  !! STPrimitive         { a | "  { | } " } ;;
  !! localDefs           &joins ;;
  !! blockContents       { a let a 0 @ :defs a 1 @ :body | ${ {{ defs }} | {{ body }} }$ } ;;
  !! blockBodyReturn     { | "  ---<-" +$ } ;;
  !! blockBodyExpression &joins ;;
  !! formula             { a | a 0 @ a 1 @ joins +$ } ;;
  // returns [ methodName$ args$ (space separated) # of args ]
  !! binaryOperand       { a | a 0 @ a 1 @ joins +$ } ;;
  !! evaluation          &joins ;;
  !! unaryPattern        { a | [ a " " ] } ;;
  !! keywordPattern      { a | [ a { i | i 0 @ } map join  a { i | i 1 @ } map joins ] } ;;
  !! assignation         { a let a 0 @ :assignments a 1 @ :evaluation |
    [ evaluation { | " dup " } assignments # 1 - repeat assignments {} do ] join } ;;
  !! unaryMessage        { m | "  ." m sp +$ +$ } ;;
  !! binaryMessage       { i | [ i 1 @ "  swap ." i 0 @ ] join } ;;
  !! keywordMessage { a let
    a { | 0 @ } map join  :name
    a { | 1 @ } map joins :formulas
    |
    // TODO: if length is 1 then pick and drop could be replaced with just a swap
    [ formulas a len #>$ 'pick '. name +$ 'drop ] joins
  } ;;
  !! messages            { a let a 0 @ :unary a 1 @ :binary a 2 @ :keyword |
    [ unary joins  binary joins  keyword ] joins
  } ;;
  !! STString            { a | [ '" "  " a '" ] join } ;;
//  !! superclass          { a | a { | a } { | 'Object } ifelse } ;;
  !! superclass          { a | a { | 'Object } || } ;;
  !! program             { a | a nl joinWith } ;;
  !! assignment          { a | "  :" a +$ } ;;
  !! nestedBlock         { a | [ '{ a 1 @ joins (* '| *) a 2 @ '} ] joins } ;;
  |
  { m | m ?? { | m _super_ () } || }
} () :SOMCompiler
