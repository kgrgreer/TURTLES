{ s | s print$ " -------------------------------" print$ } ::section

// a comment
1 1 + . // another comment
/*
  a multiline
  comment
*/
2 2 + .
5 132 + .
3.1415926 .
10 -1 + .
1 1 = .
1 0 = .
1 ! .
0 ! .
5 :five
five .
five five + .

" Logical Operators" section
1 1 = :true
1 0 = :false
false false & .
false true  & .
true  false & .
true  true  & .
false false | .
false true  | .
true  false | .
true  true  | .

" Forth-like stack operators" section
{ _ | } ::drop  { o | o o } ::dup  { a b | b a } ::swap

1 2 3 drop drop drop
42 dup dup dup . . . .
1 2 swap . .

" Closure Test" section
1000 { counter | { | counter++ counter } } () ::cc
cc cc cc cc cc

" Short-circuited logical operators" section
1 { | 2 . 1 } &&
0 { | 2 . 1 } &&
1 { | 2 . 1 } ||
0 { | 2 . 1 } ||

" if and ifElse" section
1 { | 666 . } if
0 { | 777 . } if

1 { | 100 . } { | 200 . } ifElse
0 { | 100 . } { | 200 . } ifElse

" Make your own if statement" section
{ flag block | flag block && } ::if2
1 { | 666 . } if2
0 { | 777 . } if2

" Make your own ifElse statement" section
{ flag ifBlock elseBlock | flag ifBlock && flag elseBlock || } ::ifElse2
1 { | 100 . } { | 200 . } ifElse2
0 { | 100 . } { | 200 . } ifElse2

" While loop" section
1 5 { start end | { | start end <= } { | start . start start++ } while } ()

" For loops" section
100 105 { i | i . } for

" Make your own for statement" section
{ s e block | { | s e <= } { | s block () s++ } while } ::for2
100 105 { i | i . } for2

0 { count |
  1 1000 { i |
    i .
    1 1000 { j |
      count++
    } for
  } for
  count .
} ()

{ n | 0 n - } :neg

{ block |
  now { start |
    block ()
    now start - .
  } ()
} ::bench
