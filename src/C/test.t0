{ c b | { | c () ! } b while } ::until

{ | { | key 10 != } { | } while } :!//
// Now we have C++-style comments

{ let 0 :prev 0 :c | { | prev 42 =  c 47 =  & } { | c :prev key :c } until } :!/*
/*
 *  Now we have C-style comments
 */

{ | /* comments inside a function */ " comment ignored" .$ } ()

{ s | s .$ " -------------------------------" .$ } ::section

1 1 + . // another comment
2 2 + .
5 132 + .
3.1415926 .
10 -1 + .
1 1 = .
1 0 = .
1 ! .
0 ! .
5 :five
five .
five five + .

{ } :nil
nil :nop

" Logical Operators" section
1 1 = :true
1 0 = :false
false false & .
false true  & .
true  false & .
true  true  & .
false false | .
false true  | .
true  false | .
true  true  | .

" Forth-like stack operators" section
{ _ } ::drop
{ a b } ::drop2
{ a | a a } ::dup
{ a b | b a } ::swap

1 2 3 drop drop drop
42 dup dup dup . . . .
1 2 swap . .

" Closure Test" section
1000 { counter | { | counter++ counter } } () ::cc
cc cc cc cc cc

{ let 1000 :counter | { | counter counter++ } } () ::cc
cc cc cc cc cc

" Short-circuited logical operators" section
1 { | 2 . 1 } &&
0 { | 2 . 1 } &&
1 { | 2 . 1 } ||
0 { | 2 . 1 } ||

" if and ifelse" section
1 { | 666 . } if
0 { | 777 . } if

1 { | 100 . } { | 200 . } ifelse
0 { | 100 . } { | 200 . } ifelse

" Make your own if statement" section
{ flag block | flag block && drop } ::if2
1 { | 666 . } if2
0 { | 777 . } if2

" Make your own ifelse statement" section
{ flag ifBlock elseBlock | flag ifBlock && flag elseBlock || } ::ifelse2
1 { | 100 . } { | 200 . } ifelse2
0 { | 100 . } { | 200 . } ifelse2

" While loop" section
// 1 5 { start end | { | start end <= } { | start . start++ } while } ()

" For loops" section
// 100 105 { i | i . } for

" Make your own for statement" section
// { s e block | { | s e <= } { | s block () s++ } while } ::for2
// 100 105 { i | i . } for2

0 { count |
  1 10 { i |
    1 10 { j |
      count++
    } for
  } for
  count .
} ()

{ n | 0 n - } :neg

{ block |
  now { start |
    block ()
    now start - .
  } ()
} ::bench

'Switch section
'3 switch
  '1 'a
  '2 'b
  '3 'c
    'x
end .

/*
3 switch
  1 { | " one"   }
  2 { | " two"   }
  3 { | " three" }
  { | " unknown" }
end () .
*/

{ s let key :oldKey 0 :i |
  s len { l |
    s .$
    i .
    l .
    { let s i charAt :c | i++ c } :key
  } ()
} ::eval



" 1 1 + ." eval
