{ | { | key 10 != } { | } while } :!//
// Now we have C++-style comments

// //////////////////////////////////////////////////////////////////////////
// Prefix.t0
// T0 Language Features written in T0
// //////////////////////////////////////////////////////////////////////////

{ c b | { | c () ! } b while } ::until

{ let 0 :prev 0 :c | { | prev 42 =  c 47 =  & } { | c :prev key :c } until } :!/*
/*
 *  Now we have C-style comments
 */

 { let 0 :prev 0 :c | { | prev 42 =  c 41 =  & } { | c :prev key :c } until } :!(*
 (*
  *  Now we have Beta-style comments, let's just use to comment out code
  *)

1 1 = :true         // define true
1 2 = :false        // define false
{ } :nil            // define 'nil', like doing nil = new Object() in Java/JS
nil :nop
nil :{}
{ n | 0 n - } ::neg // negate

// Standard Forth-like Stack Functions
// { _ } ::drop // coded natively
{ _ __ } ::drop2
{ a | a a } ::dup
{ a b | a b a b } ::dup2
{ a b | b a } ::swap
{ a b | a b a } ::over
{ a b c | b c a } ::rot

9  charCode :tab { | tab .$ } ::.tab  // or name \t
10 charCode :nl  { | nl  .$ } ::.nl   // or name \n
13 charCode :cr

// { start end block | { | start end <= } { | start block () start++ } while } ::for // coded natively

// Standard High-Order Functions
{ a f | 0 a # 1 - { i | a i @ f () } for } ::do
{ a f | [ a f do ] } ::map
{ a v f | v a f do } ::reduce
{ a p | [ a { e | e p () { | e } if } do ] } ::filter
{ a | a " " { | >$ +$ } reduce } ::join


{ | key } ::_key_

{ s let &_key_ :oldKey 0 :i |
  { let s len :l |
    { :outer |
      i l = { | oldKey ::_key_ -1 outer<- } if
      i l <
        { | s i charAt }
        { | 32 }
      ifelse
      i++
    } ::_key_
  } ()
  eval_
} ::eval


// Array Functions
{ a b | [ a {} do b {} do ] } ::+[]
{ a | [ a {} do ] } ::clone[]
{ a start end | start end { i | a i @ } for } ::slice


{ | charCode } ::c>$
true  :#T
false :#F


{ n | n 0 < { | n neg } { | n } ifelse } ::abs
