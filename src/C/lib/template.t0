'lib/parsers.t0 require

{ |
  i{
    { let
      Template: [ { | .Code } >> *char ] alt star joinp { s | [ "  [ " '""" ` s '"""  "  ] join " ] join } mapp ;
      Code:     [ '{{ { | .CodeBody } >> '}} ] 1 seq1 { c | [ '""" c '""" ` ] join } mapp ;
      CodeBody: [ '}} lit notp *char ] 1 seq1 plus joinp ;
    | { m | 'MethodInParser: .$ m .$ .nl   m ?? } } () :parser

    { input let input 0 #F #F parser PStream .Template :result |
      result
        { | result .value }
        { | " syntax error" .$ }
      ifelse
    } ::compiler
  }i

  { let 0 :prev 0 :c |
    [ { | prev `} = c `$ = & } { | c :prev key :c c c>$ } until drop2 ] join
    compiler emit
  }
} () :!${
