// parsers.t0
// A Parse Combinator Library

// A Parser Stream - used as input for parsers
// TODO: switch to ?? style instead of switch
{ str pos value ignore obj let false :tail |
  { m |
    m switch
      'parse  { parser this | this parser () }
      'parseToken { parser this |
        ignore
          {
            let this .ignoreOff parser () :result |
            result
              { | ignore result .ignoreOn }
              { | result }
            ifelse
          }
          { | this parser () }
        ifelse
      }
      'ignoreOff { this | str pos value false obj PStream }
      'ignoreOn { ignore this | str pos value ignore obj PStream .maybeIgnore }
      'pos    { this | pos }
      'head   { this |
        // [ " pos: " pos " , head-> " str pos charAt ] join .$ .nl
        str pos charAt }
      'tail   { this |
        tail !
          { | str pos 1 + this .head ignore obj PStream ignore { | .maybeIgnore } if :tail }
        if
        tail
      }
      'maybeIgnore { this let this ignore () :ps | ps { | 'ignoring .$ .nl this .value ps .:value  } { | this } ifelse }
      'value    { this | value }
      ':value { v2 this | value v2 = { | this } { | str pos v2 ignore obj PStream } ifelse } // optimization, doesn't work well until '=' works with more than integers
      'toString { this | [ " PStream pos: " pos " , value: '" value '' nl ] join }
      #F
    end { | m obj () } ||
  }
} ::PStream

{ p | { ps | p ps .parseToken } } ::tok

{ str v | { ps let 0 :i |   // ???: add do$ ?, rename charAt c@?
  { | i str len <  { | ps .head str i charAt = } && } { | ps .tail :ps  i++ } while
  str len i = { | v ps .:value } { | false } ifelse
} } ::litMap

{ str | str str litMap } ::lit
{ start end | { ps | start ps .head end <=< { | ps .tail } { | false } ifelse } } ::range

{ parsers | parsers { p | p fn? { | p } { | p lit } ifelse } map } ::prepare

{ parsers | parsers prepare :parsers { ps let 0 :i |
  [ { | i parsers # < { | parsers i @ ps .parse :ps ps } && } { | i++ ps .value } while ]
  parsers # i = { a | a ps .:value } { _ | false } ifelse
} } ::seq

{ parsers i | parsers seq { | i @ } mapp } ::seq1

{ parsers | parsers prepare :parsers { ps let 0 :i false :ret |
  { | i parsers # < { | parsers i @ ps .parse :ret ret ! } && } { | i++ } while
  ret
} } ::alt

{ parser min | { ps let 0 :i false :ret |
  [ { | ps :ret  parser ps .parse :ps ps } { | i++ ps .value } while ]
  i min >=  { | ret .:value } { _ | #F } ifelse
} } ::repeatp

{ | 0 repeatp } ::star
{ | 1 repeatp } ::plus

{ parser delim |
  [ [ parser delim ] 0 seq1 star (* parser opt *) ] seq
  { a | [ a 0 @  { e | e } do a 1 @ ] } mapp
} ::delim

{ parser | { ps let parser ps .parse :ret | ret { | false ps .:value } || } } ::opt

{ | &join mapp } ::joinp

{ parser | { ps | parser ps .parse { | false } { | ps } ifelse } } ::notp

{ p | { ps let ps .head :head | head { | head p () } && { | head charCode ps .tail .:value } && } } ::char?
{ str | { c | str c charCode $indexOf -1 = } char? } ::!chars
{ str | { c | str c charCode $indexOf -1 > } char? } ::chars
{ c | #T } char? :*char

{ p f | { ps | p ps .parse :ps ps { | ps .value f () ps .:value } { | false } ifelse } } ::mapp

{ o m super f | { ps | o m super () () f mapp ps .parse } } ::action
