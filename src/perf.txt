t0.c can increase performance in a number of ways:

1. Replace @(frame, offset) with hard-coded versions which don't take arguments.
Ex. @[0-5][0-5]

2. Different versions of the callClosure instruction depending on:
a. if a new closure is created
b. if local variables are created
c. if the function has only one instruction or not

3. Don't create a stack frame when running in the current context.
Ex. { | ... } if
Maybe create custom versions of if and if/else.
{} {} ifelse could combine closure/closure/ifelse so that it would
only create the closure for the required block.
Also, create a combined closure/closure/while instruction.

4. Create constant version of common arguments like +-%/<==.
Ex. so instead of "constant(1) +" you would have a +1 instruction.
Same for other common instructions and constant values.
In the event of adding a non common constant a +constant command would
combine the behaviour of constant and +.

5. Closures could also provide their own looping support for things like
repeat or for loops. Repeat and for would just delegate to the function
itself to perform these operations. This would allow functions to reuse
duplicating function setup and teardown costs.

6. array.filter(fn) and array.orderBy(comparator) could optimize function
call overhead.

7. Similar to #4, create custom versions of the "constant" instruction for
common values like -1, 0, 1 ... 10, 100, etc.

8. Add concurrent looping options like fold/reduce and parallel sorting and filtering.

9. Experimental: try running multiple virtual "threads" in parallel in the execute()
function to take advantage of instruction level parallelism so that one function
can be called while another is blocked on a memory read.

10. Combine data-structure maintenance with GC, so that if an array or hashtable
is resized, or a tree is rebalanced, it is either postponed until the next GC
or done as part of an early partial GC, creating the cleaner structure in the
next arena.

11. Create classes of String for things like sub-strings and concatenated strings.
This is faster than copying strings to create new ones. Convert these to normal
Strings on the next GC, which will increase their performance. Many temporary
strings will never live that long and never need to be converted. This eliminates
the need for things like StringBuilders and Buffers.

12. Polymorphic Inline Caches (PIC)

13. Duplicate methods based on class. Even without any other effort like
#14 and #15 below, this should still increase performance by improving
effectiveness of #12 above.

14. Super-Fly

15. Partial Eval

16. Many stdlib functions can easily be implemented in T0
(ex. dup, filter, for, while, if, ifelse, etc.) but should be re-implemented
in C for better performance.

16. Create a large class X method lookup matrix in the unused GC arena.
This will use a relatively large amount of memory, but that memory wasn't
being used anyway and would be a simple method to greatly increase performance
of polymorphic calls. Could only be done for those classXmethod combinations
which repeatedly cause PIC faults.

17. partialEval when creating closures. So something like:
{ fn | { | ... fn ... } } hard-codes / inlines fn in a copy of the inner function.
This would allow for function composition without overhead. Could also be
done before using a closure with loops. Would require knowing which values
are constant. Could be detected if the :fn emitter is never called. This is
very useful for style of programming FOAM does internally and with mlangs and
effectively gives you a functional style of code-generation.

18. Contexts - If contexts are treated like Superfly classes without a value,
then the same optimizations used to specialize for Superfly would also work
to eliminate context lookup overhead. Flyweights are objects without class
and contexts are objects without a value.

19. Peephole Optimizer - many of the optimizations could be implemented
as a peephole optimizer. After push code onto the code space, call the "peep"
global function which has a table of peephole rules which it attempts to apply.
Things like:
  @ 0 0 -> @00
  constant 1 + -> +1
  closure $1 closure $2 ifelse -> closureclosureifelse $1 $2

This would have the advantage of simplifying the rest of the code base as it
wouldn't need to deal with these types of optimizations. The peep optimizer
could be written in T0 and could be loaded or not depending on requirements.

It would isolate and separate these types of optimizations making the core
system cleaner and easier to understand. It would also be extensible, as
"peep" could be decorated to add new optimizations.

--

In general, creating larger compound instructions reduces the instruction
call overhead and lets the system perform more work per instruction.
It also reduces program sizes.

Ensure that fundamental operations like function/method calls are
performed as efficiently as possible.

It is impossible to perform a lot of work without some kind of looping
or iterating over some large data-structure, so ensure that looping, traversal,
filtering, etc. are all done as efficiently as possible.

Combine efficient looping with efficient function calls where possible.

Currently compiling with -O2 doesn't work. Break the source code into multiple
.c files and compile non-offending code with -O2.









void repeatStatement() {
  const long block = (long) pop(stack);
  const long times = (long) pop(stack);

  // Faster Version
  long ret = ip;
  ip = block;
  Fn fn = (Fn) nextI();
  if ( fn == callClosure0 && false ) {
    long ofp = fp;
    long pfp = (long) nextI(); // parent fp
    long fn  = (long) nextI(); // fn ptr

    // printf("calling closure at: %ld, fp: %ld, fn: %ld, from: %ld\n", closure, pfp, fn, ip);
    fp = pfp;
    ip = fn;
    const Fn f = (Fn) nextI();
    long iip = ip;
    for ( long i = 0 ; i < times ; i+=4 ) {
      /*
      (f)();
      (f)();
      (f)();
      (f)();
      */
      // faster: ???
      ip = iip; (f)();
      ip = iip; (f)();
      ip = iip; (f)();
      ip = iip; (f)();
    }
    fp = ofp;
    ip = ret;
  } else {
    long pp = ip;
    for ( long i = 0 ; i < times ; i++ ) {
      ip = pp;
      (fn)();
    }
    ip = ret;
  }
  /*
  // Simpler Version
  for ( long i = 0 ; i <= times ; i++ ) {
    callInstruction(block);
  }
  */
}
